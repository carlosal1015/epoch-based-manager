.. default-domain:: chpl

.. module:: EpochManager
   :synopsis: To use the :class:`EpochManager`, first create an instance.

EpochManager
============
**Usage**

.. code-block:: chapel

   use EpochManager;



To use the :class:`EpochManager`, first create an instance.

.. code-block:: chapel

 var manager = new unmanaged EpochManager();


Registering a Task
------------------
A task must be registered with the manager in order to use the manager.
Registration returns a token.

.. code-block:: chapel

 var tok = manager.register();


Pinning/Unpinning a Task
------------------------
To avoid reclamation while a task is accessing a resource, I.E. to enter
critical section, a task must `pin`. Correspondingly to exit critical section,
the task must `unpin`.

.. code-block:: chapel

 // Enter critical section
 tok.pin();
 // Do something

 // Exit critical section
 tok.unpin();


Deleting an object
------------------
To `delete` an object:

.. code-block:: chapel

 tok.delete_obj(myObj);


.. note::
 A task must be `pinned` to `delete` an object. The manager can only be used to
 delete ``unmanaged`` objects.


Reclaiming deleted objects
--------------------------
To try to reclaim memory:

.. code-block:: chapel

 tok.try_reclaim();


.. note::
 Alternatively, a task may call ``manager.try_reclaim()``.


Unregister a Task
-----------------
In the end, a registered task needs to `unregister` from the manager. The
registration token is a scoped variable, and hence the ending of the scope in
which the task registered would automatically `unregister` the task.
`unregister` can also be performed manually:

.. code-block:: chapel

 tok.unregister();

Destroy
-------
To destroy the manager, and reclaim all the memory managed by the manager:

.. code-block:: chapel

 delete manager;

.. class:: EpochManager

   
   :class:`EpochManager` manages reclamation of objects, ensuring
   thread-safety.
   


   .. method:: proc init()

      
      Default initialize the manager.
      

   .. method:: proc register(): owned TokenWrapper

      
      Register a task.
      
      :returns: A handle to the manager
      

   .. method:: proc try_reclaim()

      
      Try to announce a new epoch. If successful, reclaim objects which are
      safe to reclaim
      

   .. method:: proc deinit()

      
      Reclaim all objects
      

.. class:: TokenWrapper

   
   Handle to :class:`EpochManager`
   


   .. method:: proc pin()

      
      `Pin` a task
      

   .. method:: proc unpin()

      
      `Unpin` a task
      

   .. method:: proc delete_obj(x)

      
      Delete an object.
      
      :arg x: The class instance to be deleted. Must be of unmanaged class type
      

   .. method:: proc try_reclaim()

      
      Try to announce a new epoch. If successful, reclaim objects which are
      safe to reclaim
      

   .. method:: proc unregister()

      
      Unregister the handle from the manager
      

   .. method:: proc deinit()

      
      Unregister the handle from the manager
      

