.. default-domain:: chpl

.. module:: EpochManager
   :synopsis: To use the :class:`EpochManager`, first create an instance.

EpochManager
============
**Usage**

.. code-block:: chapel

   use EpochManager;



To use the :class:`EpochManager`, first create an instance.

.. code-block:: chapel

 var manager = new unmanaged EpochManager();


A task must be registered with the manager in order to use the manager.
Registration returns a token.

.. code-block:: chapel

 var tok = manager.register();


To avoid reclamation while a task is accessing a resource, I.E. to enter
critical section, a task must `pin`. Correspondingly to exit critical section,
the task must `unpin`.

.. code-block:: chapel

 // Enter critical section
 tok.pin();
 // Do something

 // Exit critical section
 tok.unpin();


To `delete` an object:

.. code-block:: chapel

 tok.delete_obj(myObj);


.. note::
 A task must be `pinned` to `delete` an object. The manager can only be used to
 delete ``unmanaged`` objects.


To try to reclaim memory:

.. code-block:: chapel

 tok.try_reclaim();


.. note::
 Alternatively, a task may call ``manager.try_reclaim()``.


In the end, a registered task needs to `unregister` from the manager. The
registration token is a scoped variable, and hence the ending of the scope in
which the task registered would automatically `unregister` the task.
`unregister` can also be performed manually:

.. code-block:: chapel

 tok.unregister();


To destroy the manager, and reclaim all the memory managed by the manager:

.. code-block:: chapel

 delete manager;

.. class:: EpochManager

   .. attribute:: const EBR_EPOCHS: uint = 3

   .. attribute:: const INACTIVE: uint = 0

   .. attribute:: var global_epoch: atomicuint

   .. attribute:: var is_setting_epoch: atomicbool

   .. attribute:: var allocated_list: unmanaged LockFreeLinkedList(unmanaged _token)

   .. attribute:: var free_list: unmanaged LockFreeQueue(unmanaged _token)

   .. attribute:: var limbo_list: [1..EBR_EPOCHS] unmanaged LimboList()

   .. attribute:: var id_counter: atomicuint

   .. method:: proc init()

   .. method:: proc register(): owned TokenWrapper

   .. method:: proc unregister(tok: unmanaged _token)

   .. method:: proc pin(tok: unmanaged _token)

   .. method:: proc unpin(tok: unmanaged _token)

   .. method:: proc try_advance(): uint

   .. method:: proc delete_obj(tok: unmanaged _token, x: unmanaged object)

   .. method:: proc try_reclaim()

   .. method:: proc deinit()

.. class:: TokenWrapper

   
   Handle to :class:`EpochManager`
   


   .. method:: proc pin()

      
      `Pin` a task
      

   .. method:: proc unpin()

      
      `Unpin` a task
      

   .. method:: proc delete_obj(x)

      
      Delete an object.
      
      :arg x: The class instance to be deleted. Must be of unmanaged class type
      

   .. method:: proc try_reclaim()

      
      Try to announce a new epoch. If successful, reclaim objects which are
      safe to reclaim
      

   .. method:: proc unregister()

      
      Unregister the handle from the manager
      

   .. method:: proc deinit()

      
      Unregister the handle from the manager
      

